// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto4_3.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from proto4_3.proto</summary>
public static partial class Proto43Reflection {

  #region Descriptor
  /// <summary>File descriptor for proto4_3.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static Proto43Reflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5wcm90bzRfMy5wcm90byK4AQoEU2l0ZRIYChByZGZxdWlja2ZpeGFib3V0",
          "GAEgASgJEhkKEXJkZnNxdWlja2ZpeGxhYmVsGAIgASgJEg4KBmZvcm1hdBgD",
          "IAEoCRIYChBmb2FmcXVpY2tmaXhuYW1lGAQgASgJEhcKD2JvdHF1aWNrZml4",
          "U2l0ZRgFIAEoCRIeChZib3RxdWlja2ZpeGhhc0J1aWxkaW5nGAYgASgFEgwK",
          "BEdVSUQYByABKAkSCgoCSUQYCCABKAki2AEKCEJ1aWxkaW5nEhkKEXJkZnNx",
          "dWlja2ZpeGxhYmVsGAEgASgJEgwKBGluc3QYAiABKAkSHwoXcHJvZHVjdHF1",
          "aWNrZml4QnVpbGRpbmcYAyABKAkSDgoGZm9ybWF0GAQgASgJEhcKD3JkZnF1",
          "aWNrZml4dHlwZRgFIAEoCRIbChNib3RxdWlja2ZpeEJ1aWxkaW5nGAYgASgJ",
          "EiIKGmJvdHF1aWNrZml4Y29udGFpbnNFbGVtZW50GAcgASgJEgwKBEdVSUQY",
          "CCABKAkSCgoCSUQYCSABKAki8QEKB0VsZW1lbnQSDAoER1VJRBgBIAEoCRIK",
          "CgJJRBgCIAEoCRIaChJib3RxdWlja2ZpeEVsZW1lbnQYAyABKAkSGQoRcmRm",
          "c3F1aWNrZml4bGFiZWwYBCABKAkSFwoPcmRmcXVpY2tmaXh0eXBlGAUgASgJ",
          "EhEKCWZhY2VDb3VudBgGIAEoBRITCgt2ZXJ0ZXhDb3VudBgHIAEoBRIQCghj",
          "ZW50cm9pZBgIIAEoCRILCgNNaW4YDCABKAkSCwoDTWF4GA0gASgJEgwKBERp",
          "bVgYCSABKAkSDAoERGltWRgKIAEoCRIMCgREaW1aGAsgASgJIi8KEUVsZW1l",
          "bnRDb2xsZWN0aW9uEhoKCGVsZW1lbnRzGAEgAygLMgguRWxlbWVudCIyChJC",
          "dWlsZGluZ0NvbGxlY3Rpb24SHAoJYnVpbGRpbmdzGAEgAygLMgkuQnVpbGRp",
          "bmdiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Site), global::Site.Parser, new[]{ "Rdfquickfixabout", "Rdfsquickfixlabel", "Format", "Foafquickfixname", "BotquickfixSite", "BotquickfixhasBuilding", "GUID", "ID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Building), global::Building.Parser, new[]{ "Rdfsquickfixlabel", "Inst", "ProductquickfixBuilding", "Format", "Rdfquickfixtype", "BotquickfixBuilding", "BotquickfixcontainsElement", "GUID", "ID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Element), global::Element.Parser, new[]{ "GUID", "ID", "BotquickfixElement", "Rdfsquickfixlabel", "Rdfquickfixtype", "FaceCount", "VertexCount", "Centroid", "Min", "Max", "DimX", "DimY", "DimZ" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ElementCollection), global::ElementCollection.Parser, new[]{ "Elements" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BuildingCollection), global::BuildingCollection.Parser, new[]{ "Buildings" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Site : pb::IMessage<Site> {
  private static readonly pb::MessageParser<Site> _parser = new pb::MessageParser<Site>(() => new Site());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Site> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::Proto43Reflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Site() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Site(Site other) : this() {
    rdfquickfixabout_ = other.rdfquickfixabout_;
    rdfsquickfixlabel_ = other.rdfsquickfixlabel_;
    format_ = other.format_;
    foafquickfixname_ = other.foafquickfixname_;
    botquickfixSite_ = other.botquickfixSite_;
    botquickfixhasBuilding_ = other.botquickfixhasBuilding_;
    gUID_ = other.gUID_;
    iD_ = other.iD_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Site Clone() {
    return new Site(this);
  }

  /// <summary>Field number for the "rdfquickfixabout" field.</summary>
  public const int RdfquickfixaboutFieldNumber = 1;
  private string rdfquickfixabout_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Rdfquickfixabout {
    get { return rdfquickfixabout_; }
    set {
      rdfquickfixabout_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "rdfsquickfixlabel" field.</summary>
  public const int RdfsquickfixlabelFieldNumber = 2;
  private string rdfsquickfixlabel_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Rdfsquickfixlabel {
    get { return rdfsquickfixlabel_; }
    set {
      rdfsquickfixlabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "format" field.</summary>
  public const int FormatFieldNumber = 3;
  private string format_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Format {
    get { return format_; }
    set {
      format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "foafquickfixname" field.</summary>
  public const int FoafquickfixnameFieldNumber = 4;
  private string foafquickfixname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Foafquickfixname {
    get { return foafquickfixname_; }
    set {
      foafquickfixname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "botquickfixSite" field.</summary>
  public const int BotquickfixSiteFieldNumber = 5;
  private string botquickfixSite_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BotquickfixSite {
    get { return botquickfixSite_; }
    set {
      botquickfixSite_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "botquickfixhasBuilding" field.</summary>
  public const int BotquickfixhasBuildingFieldNumber = 6;
  private int botquickfixhasBuilding_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BotquickfixhasBuilding {
    get { return botquickfixhasBuilding_; }
    set {
      botquickfixhasBuilding_ = value;
    }
  }

  /// <summary>Field number for the "GUID" field.</summary>
  public const int GUIDFieldNumber = 7;
  private string gUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GUID {
    get { return gUID_; }
    set {
      gUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ID" field.</summary>
  public const int IDFieldNumber = 8;
  private string iD_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ID {
    get { return iD_; }
    set {
      iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Site);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Site other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Rdfquickfixabout != other.Rdfquickfixabout) return false;
    if (Rdfsquickfixlabel != other.Rdfsquickfixlabel) return false;
    if (Format != other.Format) return false;
    if (Foafquickfixname != other.Foafquickfixname) return false;
    if (BotquickfixSite != other.BotquickfixSite) return false;
    if (BotquickfixhasBuilding != other.BotquickfixhasBuilding) return false;
    if (GUID != other.GUID) return false;
    if (ID != other.ID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Rdfquickfixabout.Length != 0) hash ^= Rdfquickfixabout.GetHashCode();
    if (Rdfsquickfixlabel.Length != 0) hash ^= Rdfsquickfixlabel.GetHashCode();
    if (Format.Length != 0) hash ^= Format.GetHashCode();
    if (Foafquickfixname.Length != 0) hash ^= Foafquickfixname.GetHashCode();
    if (BotquickfixSite.Length != 0) hash ^= BotquickfixSite.GetHashCode();
    if (BotquickfixhasBuilding != 0) hash ^= BotquickfixhasBuilding.GetHashCode();
    if (GUID.Length != 0) hash ^= GUID.GetHashCode();
    if (ID.Length != 0) hash ^= ID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Rdfquickfixabout.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Rdfquickfixabout);
    }
    if (Rdfsquickfixlabel.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Rdfsquickfixlabel);
    }
    if (Format.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Format);
    }
    if (Foafquickfixname.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Foafquickfixname);
    }
    if (BotquickfixSite.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(BotquickfixSite);
    }
    if (BotquickfixhasBuilding != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(BotquickfixhasBuilding);
    }
    if (GUID.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(GUID);
    }
    if (ID.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(ID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Rdfquickfixabout.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Rdfquickfixabout);
    }
    if (Rdfsquickfixlabel.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Rdfsquickfixlabel);
    }
    if (Format.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
    }
    if (Foafquickfixname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Foafquickfixname);
    }
    if (BotquickfixSite.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BotquickfixSite);
    }
    if (BotquickfixhasBuilding != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BotquickfixhasBuilding);
    }
    if (GUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GUID);
    }
    if (ID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Site other) {
    if (other == null) {
      return;
    }
    if (other.Rdfquickfixabout.Length != 0) {
      Rdfquickfixabout = other.Rdfquickfixabout;
    }
    if (other.Rdfsquickfixlabel.Length != 0) {
      Rdfsquickfixlabel = other.Rdfsquickfixlabel;
    }
    if (other.Format.Length != 0) {
      Format = other.Format;
    }
    if (other.Foafquickfixname.Length != 0) {
      Foafquickfixname = other.Foafquickfixname;
    }
    if (other.BotquickfixSite.Length != 0) {
      BotquickfixSite = other.BotquickfixSite;
    }
    if (other.BotquickfixhasBuilding != 0) {
      BotquickfixhasBuilding = other.BotquickfixhasBuilding;
    }
    if (other.GUID.Length != 0) {
      GUID = other.GUID;
    }
    if (other.ID.Length != 0) {
      ID = other.ID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Rdfquickfixabout = input.ReadString();
          break;
        }
        case 18: {
          Rdfsquickfixlabel = input.ReadString();
          break;
        }
        case 26: {
          Format = input.ReadString();
          break;
        }
        case 34: {
          Foafquickfixname = input.ReadString();
          break;
        }
        case 42: {
          BotquickfixSite = input.ReadString();
          break;
        }
        case 48: {
          BotquickfixhasBuilding = input.ReadInt32();
          break;
        }
        case 58: {
          GUID = input.ReadString();
          break;
        }
        case 66: {
          ID = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Building : pb::IMessage<Building> {
  private static readonly pb::MessageParser<Building> _parser = new pb::MessageParser<Building>(() => new Building());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Building> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::Proto43Reflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Building() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Building(Building other) : this() {
    rdfsquickfixlabel_ = other.rdfsquickfixlabel_;
    inst_ = other.inst_;
    productquickfixBuilding_ = other.productquickfixBuilding_;
    format_ = other.format_;
    rdfquickfixtype_ = other.rdfquickfixtype_;
    botquickfixBuilding_ = other.botquickfixBuilding_;
    botquickfixcontainsElement_ = other.botquickfixcontainsElement_;
    gUID_ = other.gUID_;
    iD_ = other.iD_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Building Clone() {
    return new Building(this);
  }

  /// <summary>Field number for the "rdfsquickfixlabel" field.</summary>
  public const int RdfsquickfixlabelFieldNumber = 1;
  private string rdfsquickfixlabel_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Rdfsquickfixlabel {
    get { return rdfsquickfixlabel_; }
    set {
      rdfsquickfixlabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "inst" field.</summary>
  public const int InstFieldNumber = 2;
  private string inst_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Inst {
    get { return inst_; }
    set {
      inst_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "productquickfixBuilding" field.</summary>
  public const int ProductquickfixBuildingFieldNumber = 3;
  private string productquickfixBuilding_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ProductquickfixBuilding {
    get { return productquickfixBuilding_; }
    set {
      productquickfixBuilding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "format" field.</summary>
  public const int FormatFieldNumber = 4;
  private string format_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Format {
    get { return format_; }
    set {
      format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "rdfquickfixtype" field.</summary>
  public const int RdfquickfixtypeFieldNumber = 5;
  private string rdfquickfixtype_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Rdfquickfixtype {
    get { return rdfquickfixtype_; }
    set {
      rdfquickfixtype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "botquickfixBuilding" field.</summary>
  public const int BotquickfixBuildingFieldNumber = 6;
  private string botquickfixBuilding_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BotquickfixBuilding {
    get { return botquickfixBuilding_; }
    set {
      botquickfixBuilding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "botquickfixcontainsElement" field.</summary>
  public const int BotquickfixcontainsElementFieldNumber = 7;
  private string botquickfixcontainsElement_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BotquickfixcontainsElement {
    get { return botquickfixcontainsElement_; }
    set {
      botquickfixcontainsElement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "GUID" field.</summary>
  public const int GUIDFieldNumber = 8;
  private string gUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GUID {
    get { return gUID_; }
    set {
      gUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ID" field.</summary>
  public const int IDFieldNumber = 9;
  private string iD_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ID {
    get { return iD_; }
    set {
      iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Building);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Building other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Rdfsquickfixlabel != other.Rdfsquickfixlabel) return false;
    if (Inst != other.Inst) return false;
    if (ProductquickfixBuilding != other.ProductquickfixBuilding) return false;
    if (Format != other.Format) return false;
    if (Rdfquickfixtype != other.Rdfquickfixtype) return false;
    if (BotquickfixBuilding != other.BotquickfixBuilding) return false;
    if (BotquickfixcontainsElement != other.BotquickfixcontainsElement) return false;
    if (GUID != other.GUID) return false;
    if (ID != other.ID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Rdfsquickfixlabel.Length != 0) hash ^= Rdfsquickfixlabel.GetHashCode();
    if (Inst.Length != 0) hash ^= Inst.GetHashCode();
    if (ProductquickfixBuilding.Length != 0) hash ^= ProductquickfixBuilding.GetHashCode();
    if (Format.Length != 0) hash ^= Format.GetHashCode();
    if (Rdfquickfixtype.Length != 0) hash ^= Rdfquickfixtype.GetHashCode();
    if (BotquickfixBuilding.Length != 0) hash ^= BotquickfixBuilding.GetHashCode();
    if (BotquickfixcontainsElement.Length != 0) hash ^= BotquickfixcontainsElement.GetHashCode();
    if (GUID.Length != 0) hash ^= GUID.GetHashCode();
    if (ID.Length != 0) hash ^= ID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Rdfsquickfixlabel.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Rdfsquickfixlabel);
    }
    if (Inst.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Inst);
    }
    if (ProductquickfixBuilding.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ProductquickfixBuilding);
    }
    if (Format.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Format);
    }
    if (Rdfquickfixtype.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Rdfquickfixtype);
    }
    if (BotquickfixBuilding.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(BotquickfixBuilding);
    }
    if (BotquickfixcontainsElement.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(BotquickfixcontainsElement);
    }
    if (GUID.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(GUID);
    }
    if (ID.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(ID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Rdfsquickfixlabel.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Rdfsquickfixlabel);
    }
    if (Inst.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Inst);
    }
    if (ProductquickfixBuilding.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductquickfixBuilding);
    }
    if (Format.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
    }
    if (Rdfquickfixtype.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Rdfquickfixtype);
    }
    if (BotquickfixBuilding.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BotquickfixBuilding);
    }
    if (BotquickfixcontainsElement.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BotquickfixcontainsElement);
    }
    if (GUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GUID);
    }
    if (ID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Building other) {
    if (other == null) {
      return;
    }
    if (other.Rdfsquickfixlabel.Length != 0) {
      Rdfsquickfixlabel = other.Rdfsquickfixlabel;
    }
    if (other.Inst.Length != 0) {
      Inst = other.Inst;
    }
    if (other.ProductquickfixBuilding.Length != 0) {
      ProductquickfixBuilding = other.ProductquickfixBuilding;
    }
    if (other.Format.Length != 0) {
      Format = other.Format;
    }
    if (other.Rdfquickfixtype.Length != 0) {
      Rdfquickfixtype = other.Rdfquickfixtype;
    }
    if (other.BotquickfixBuilding.Length != 0) {
      BotquickfixBuilding = other.BotquickfixBuilding;
    }
    if (other.BotquickfixcontainsElement.Length != 0) {
      BotquickfixcontainsElement = other.BotquickfixcontainsElement;
    }
    if (other.GUID.Length != 0) {
      GUID = other.GUID;
    }
    if (other.ID.Length != 0) {
      ID = other.ID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Rdfsquickfixlabel = input.ReadString();
          break;
        }
        case 18: {
          Inst = input.ReadString();
          break;
        }
        case 26: {
          ProductquickfixBuilding = input.ReadString();
          break;
        }
        case 34: {
          Format = input.ReadString();
          break;
        }
        case 42: {
          Rdfquickfixtype = input.ReadString();
          break;
        }
        case 50: {
          BotquickfixBuilding = input.ReadString();
          break;
        }
        case 58: {
          BotquickfixcontainsElement = input.ReadString();
          break;
        }
        case 66: {
          GUID = input.ReadString();
          break;
        }
        case 74: {
          ID = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Element : pb::IMessage<Element> {
  private static readonly pb::MessageParser<Element> _parser = new pb::MessageParser<Element>(() => new Element());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Element> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::Proto43Reflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Element() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Element(Element other) : this() {
    gUID_ = other.gUID_;
    iD_ = other.iD_;
    botquickfixElement_ = other.botquickfixElement_;
    rdfsquickfixlabel_ = other.rdfsquickfixlabel_;
    rdfquickfixtype_ = other.rdfquickfixtype_;
    faceCount_ = other.faceCount_;
    vertexCount_ = other.vertexCount_;
    centroid_ = other.centroid_;
    min_ = other.min_;
    max_ = other.max_;
    dimX_ = other.dimX_;
    dimY_ = other.dimY_;
    dimZ_ = other.dimZ_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Element Clone() {
    return new Element(this);
  }

  /// <summary>Field number for the "GUID" field.</summary>
  public const int GUIDFieldNumber = 1;
  private string gUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GUID {
    get { return gUID_; }
    set {
      gUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ID" field.</summary>
  public const int IDFieldNumber = 2;
  private string iD_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ID {
    get { return iD_; }
    set {
      iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "botquickfixElement" field.</summary>
  public const int BotquickfixElementFieldNumber = 3;
  private string botquickfixElement_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BotquickfixElement {
    get { return botquickfixElement_; }
    set {
      botquickfixElement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "rdfsquickfixlabel" field.</summary>
  public const int RdfsquickfixlabelFieldNumber = 4;
  private string rdfsquickfixlabel_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Rdfsquickfixlabel {
    get { return rdfsquickfixlabel_; }
    set {
      rdfsquickfixlabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "rdfquickfixtype" field.</summary>
  public const int RdfquickfixtypeFieldNumber = 5;
  private string rdfquickfixtype_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Rdfquickfixtype {
    get { return rdfquickfixtype_; }
    set {
      rdfquickfixtype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "faceCount" field.</summary>
  public const int FaceCountFieldNumber = 6;
  private int faceCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FaceCount {
    get { return faceCount_; }
    set {
      faceCount_ = value;
    }
  }

  /// <summary>Field number for the "vertexCount" field.</summary>
  public const int VertexCountFieldNumber = 7;
  private int vertexCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VertexCount {
    get { return vertexCount_; }
    set {
      vertexCount_ = value;
    }
  }

  /// <summary>Field number for the "centroid" field.</summary>
  public const int CentroidFieldNumber = 8;
  private string centroid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Centroid {
    get { return centroid_; }
    set {
      centroid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Min" field.</summary>
  public const int MinFieldNumber = 12;
  private string min_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Min {
    get { return min_; }
    set {
      min_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Max" field.</summary>
  public const int MaxFieldNumber = 13;
  private string max_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Max {
    get { return max_; }
    set {
      max_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "DimX" field.</summary>
  public const int DimXFieldNumber = 9;
  private string dimX_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DimX {
    get { return dimX_; }
    set {
      dimX_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "DimY" field.</summary>
  public const int DimYFieldNumber = 10;
  private string dimY_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DimY {
    get { return dimY_; }
    set {
      dimY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "DimZ" field.</summary>
  public const int DimZFieldNumber = 11;
  private string dimZ_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DimZ {
    get { return dimZ_; }
    set {
      dimZ_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Element);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Element other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GUID != other.GUID) return false;
    if (ID != other.ID) return false;
    if (BotquickfixElement != other.BotquickfixElement) return false;
    if (Rdfsquickfixlabel != other.Rdfsquickfixlabel) return false;
    if (Rdfquickfixtype != other.Rdfquickfixtype) return false;
    if (FaceCount != other.FaceCount) return false;
    if (VertexCount != other.VertexCount) return false;
    if (Centroid != other.Centroid) return false;
    if (Min != other.Min) return false;
    if (Max != other.Max) return false;
    if (DimX != other.DimX) return false;
    if (DimY != other.DimY) return false;
    if (DimZ != other.DimZ) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GUID.Length != 0) hash ^= GUID.GetHashCode();
    if (ID.Length != 0) hash ^= ID.GetHashCode();
    if (BotquickfixElement.Length != 0) hash ^= BotquickfixElement.GetHashCode();
    if (Rdfsquickfixlabel.Length != 0) hash ^= Rdfsquickfixlabel.GetHashCode();
    if (Rdfquickfixtype.Length != 0) hash ^= Rdfquickfixtype.GetHashCode();
    if (FaceCount != 0) hash ^= FaceCount.GetHashCode();
    if (VertexCount != 0) hash ^= VertexCount.GetHashCode();
    if (Centroid.Length != 0) hash ^= Centroid.GetHashCode();
    if (Min.Length != 0) hash ^= Min.GetHashCode();
    if (Max.Length != 0) hash ^= Max.GetHashCode();
    if (DimX.Length != 0) hash ^= DimX.GetHashCode();
    if (DimY.Length != 0) hash ^= DimY.GetHashCode();
    if (DimZ.Length != 0) hash ^= DimZ.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GUID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(GUID);
    }
    if (ID.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ID);
    }
    if (BotquickfixElement.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(BotquickfixElement);
    }
    if (Rdfsquickfixlabel.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Rdfsquickfixlabel);
    }
    if (Rdfquickfixtype.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Rdfquickfixtype);
    }
    if (FaceCount != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(FaceCount);
    }
    if (VertexCount != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(VertexCount);
    }
    if (Centroid.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Centroid);
    }
    if (DimX.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(DimX);
    }
    if (DimY.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(DimY);
    }
    if (DimZ.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(DimZ);
    }
    if (Min.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(Min);
    }
    if (Max.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(Max);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GUID);
    }
    if (ID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
    }
    if (BotquickfixElement.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BotquickfixElement);
    }
    if (Rdfsquickfixlabel.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Rdfsquickfixlabel);
    }
    if (Rdfquickfixtype.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Rdfquickfixtype);
    }
    if (FaceCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceCount);
    }
    if (VertexCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VertexCount);
    }
    if (Centroid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Centroid);
    }
    if (Min.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Min);
    }
    if (Max.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Max);
    }
    if (DimX.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DimX);
    }
    if (DimY.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DimY);
    }
    if (DimZ.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DimZ);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Element other) {
    if (other == null) {
      return;
    }
    if (other.GUID.Length != 0) {
      GUID = other.GUID;
    }
    if (other.ID.Length != 0) {
      ID = other.ID;
    }
    if (other.BotquickfixElement.Length != 0) {
      BotquickfixElement = other.BotquickfixElement;
    }
    if (other.Rdfsquickfixlabel.Length != 0) {
      Rdfsquickfixlabel = other.Rdfsquickfixlabel;
    }
    if (other.Rdfquickfixtype.Length != 0) {
      Rdfquickfixtype = other.Rdfquickfixtype;
    }
    if (other.FaceCount != 0) {
      FaceCount = other.FaceCount;
    }
    if (other.VertexCount != 0) {
      VertexCount = other.VertexCount;
    }
    if (other.Centroid.Length != 0) {
      Centroid = other.Centroid;
    }
    if (other.Min.Length != 0) {
      Min = other.Min;
    }
    if (other.Max.Length != 0) {
      Max = other.Max;
    }
    if (other.DimX.Length != 0) {
      DimX = other.DimX;
    }
    if (other.DimY.Length != 0) {
      DimY = other.DimY;
    }
    if (other.DimZ.Length != 0) {
      DimZ = other.DimZ;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          GUID = input.ReadString();
          break;
        }
        case 18: {
          ID = input.ReadString();
          break;
        }
        case 26: {
          BotquickfixElement = input.ReadString();
          break;
        }
        case 34: {
          Rdfsquickfixlabel = input.ReadString();
          break;
        }
        case 42: {
          Rdfquickfixtype = input.ReadString();
          break;
        }
        case 48: {
          FaceCount = input.ReadInt32();
          break;
        }
        case 56: {
          VertexCount = input.ReadInt32();
          break;
        }
        case 66: {
          Centroid = input.ReadString();
          break;
        }
        case 74: {
          DimX = input.ReadString();
          break;
        }
        case 82: {
          DimY = input.ReadString();
          break;
        }
        case 90: {
          DimZ = input.ReadString();
          break;
        }
        case 98: {
          Min = input.ReadString();
          break;
        }
        case 106: {
          Max = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ElementCollection : pb::IMessage<ElementCollection> {
  private static readonly pb::MessageParser<ElementCollection> _parser = new pb::MessageParser<ElementCollection>(() => new ElementCollection());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ElementCollection> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::Proto43Reflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ElementCollection() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ElementCollection(ElementCollection other) : this() {
    elements_ = other.elements_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ElementCollection Clone() {
    return new ElementCollection(this);
  }

  /// <summary>Field number for the "elements" field.</summary>
  public const int ElementsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Element> _repeated_elements_codec
      = pb::FieldCodec.ForMessage(10, global::Element.Parser);
  private readonly pbc::RepeatedField<global::Element> elements_ = new pbc::RepeatedField<global::Element>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Element> Elements {
    get { return elements_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ElementCollection);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ElementCollection other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!elements_.Equals(other.elements_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= elements_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    elements_.WriteTo(output, _repeated_elements_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += elements_.CalculateSize(_repeated_elements_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ElementCollection other) {
    if (other == null) {
      return;
    }
    elements_.Add(other.elements_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          elements_.AddEntriesFrom(input, _repeated_elements_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class BuildingCollection : pb::IMessage<BuildingCollection> {
  private static readonly pb::MessageParser<BuildingCollection> _parser = new pb::MessageParser<BuildingCollection>(() => new BuildingCollection());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BuildingCollection> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::Proto43Reflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuildingCollection() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuildingCollection(BuildingCollection other) : this() {
    buildings_ = other.buildings_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuildingCollection Clone() {
    return new BuildingCollection(this);
  }

  /// <summary>Field number for the "buildings" field.</summary>
  public const int BuildingsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Building> _repeated_buildings_codec
      = pb::FieldCodec.ForMessage(10, global::Building.Parser);
  private readonly pbc::RepeatedField<global::Building> buildings_ = new pbc::RepeatedField<global::Building>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Building> Buildings {
    get { return buildings_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BuildingCollection);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BuildingCollection other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!buildings_.Equals(other.buildings_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= buildings_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    buildings_.WriteTo(output, _repeated_buildings_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += buildings_.CalculateSize(_repeated_buildings_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BuildingCollection other) {
    if (other == null) {
      return;
    }
    buildings_.Add(other.buildings_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          buildings_.AddEntriesFrom(input, _repeated_buildings_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
